@{
    // View
    View = this;

    // Check action result
    if (itemList.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!itemList.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
@if (!itemList.IsExport()) {
<script>
var currentTable = @Html.Raw(ConvertToJson(itemList.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { Item: currentTable } });
var currentPageID = ew.PAGE_ID = "list";
var currentForm;
var @(itemList.FormName);
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("@(itemList.FormName)")
        .setPageId("list")
        .setSubmitWithFetch(@(itemList.UseAjaxActions ? "true" : "false"))
        .setFormKeyCountName("@(itemList.FormKeyCountName)")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
}
@if (!itemList.IsExport()) {
<div class="btn-toolbar ew-toolbar">
@if (itemList.TotalRecords > 0 && itemList.ExportOptions.Visible) {
    itemList.ExportOptions.Render("body");
}
@if (itemList.ImportOptions.Visible) {
    itemList.ImportOptions.Render("body");
}
@if (itemList.SearchOptions.Visible) {
    itemList.SearchOptions.Render("body");
}
@if (itemList.FilterOptions.Visible) {
    itemList.FilterOptions.Render("body");
}
</div>
}
@if (!itemList.IsExport() || Config.ExportMasterRecord && itemList.IsExport("print")) {
if (!Empty(itemList.DbMasterFilter) && itemList.CurrentMasterTable == "Order") {
    if (itemList.MasterRecordExists) {
        @await Html.PartialAsync("OrderMaster.cshtml")
    }
}
}
@if (!itemList.IsModal) {
<form name="fItemsrch" id="fItemsrch" class="ew-form ew-ext-search-form" action="@AppPath(CurrentPageName())" novalidate autocomplete="off">
<div id="fItemsrch_search_panel" class="mb-2 mb-sm-0 @(itemList.SearchPanelClass)"><!-- .ew-search-panel -->
<script>
var currentTable = @Html.Raw(ConvertToJson(itemList.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { Item: currentTable } });
var currentForm;
var fItemsrch, currentSearchForm, currentAdvancedSearchForm;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery,
        fields = currentTable.fields;

    // Form object for search
    let form = new ew.FormBuilder()
        .setId("fItemsrch")
        .setPageId("list")
@if (itemList.UseAjaxActions) {
        <text>.setSubmitWithFetch(true)</text>
}

        // Dynamic selection lists
        .setLists({
        })

        // Filters
        .setFilterList(@Html.Raw(await itemList.GetFilterList()))
        .build();
    window[form.id] = form;
    currentSearchForm = form;
    loadjs.done(form.id);
});
</script>
<input type="hidden" name="cmd" value="search">
@if (!itemList.IsExport() && Empty(itemList.CurrentAction) && itemList.HasSearchFields()) { @* Show search form (begin) *@
<div class="ew-extended-search container-fluid ps-2">
<div class="row mb-0">
    <div class="col-sm-auto px-0 pe-sm-2">
        <div class="ew-basic-search input-group">
            <input type="search" name="@(Config.TableBasicSearch)" id="@(Config.TableBasicSearch)" class="form-control ew-basic-search-keyword" value="@Html.Raw(HtmlEncode(itemList.BasicSearch.SessionKeyword))" placeholder="@(HtmlEncode(Language.Phrase("Search")))" aria-label="@(HtmlEncode(Language.Phrase("Search")))">
            <input type="hidden" name="@(Config.TableBasicSearchType)" id="@(Config.TableBasicSearchType)" class="ew-basic-search-type" value="@(HtmlEncode(itemList.BasicSearch.SessionType))">
            <button type="button" data-bs-toggle="dropdown" class="btn btn-outline-secondary dropdown-toggle dropdown-toggle-split" aria-haspopup="true" aria-expanded="false">
                <span id="searchtype">@Html.Raw(itemList.BasicSearch.TypeNameShort)</span>
            </button>
            <div class="dropdown-menu dropdown-menu-end">
                <button type="button" class="dropdown-item@(itemList.BasicSearch.SessionType == "" ? " active" : "")" form="fItemsrch" data-ew-action="search-type">@Html.Raw(Language.Phrase("QuickSearchAuto"))</button>
                <button type="button" class="dropdown-item@(itemList.BasicSearch.SessionType == "=" ? " active" : "")" form="fItemsrch" data-ew-action="search-type" data-search-type="=">@Html.Raw(Language.Phrase("QuickSearchExact"))</button>
                <button type="button" class="dropdown-item@(itemList.BasicSearch.SessionType == "AND" ? " active" : "")" form="fItemsrch" data-ew-action="search-type" data-search-type="AND">@Html.Raw(Language.Phrase("QuickSearchAll"))</button>
                <button type="button" class="dropdown-item@(itemList.BasicSearch.SessionType == "OR" ? " active" : "")" form="fItemsrch" data-ew-action="search-type" data-search-type="OR">@Html.Raw(Language.Phrase("QuickSearchAny"))</button>
            </div>
        </div>
    </div>
    <div class="col-sm-auto mb-3">
        <button class="btn btn-primary" name="btn-submit" id="btn-submit" type="submit">@Html.Raw(Language.Phrase("SearchBtn"))</button>
    </div>
</div>
</div><!-- /.ew-extended-search -->
} @* Show search form (end) *@
</div><!-- /.ew-search-panel -->
</form>
}
@itemList.ShowPageHeader()
@itemList.ShowMessages()
<main class="list @(itemList.TotalRecords == 0 && !itemList.IsAdd ? " ew-no-record" : "")">
<div id="ew-list">
@if (itemList.TotalRecords > 0 || !Empty(itemList.CurrentAction)) {
<div class="card ew-card ew-grid@(itemList.IsAddOrEdit ? " ew-grid-add-edit" : "") @(itemList.TableGridClass)">
<form name="@(itemList.FormName)" id="@(itemList.FormName)" class="ew-form ew-list-form" action="@AppPath(itemList.PageName)" method="post" novalidate autocomplete="off">
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
@if (itemList.IsModal) {
<input type="hidden" name="modal" value="1">
}
@if (itemList.CurrentMasterTable == "Order" && !Empty(itemList.CurrentAction)) {
<input type="hidden" name="@(Config.TableShowMaster)" value="Order">
<input type="hidden" name="fk_ID" value="@(HtmlEncode(itemList.OrderID.SessionValue))">
}
<div id="gmp_Item" class="card-body ew-grid-middle-panel @(itemList.TableContainerClass)" style="@(itemList.TableContainerStyle)">
@if (itemList.TotalRecords > 0 || itemList.IsGridEdit || itemList.IsMultiEdit) {
<table id="tbl_Itemlist" class="@(itemList.TableClass)"><!-- .ew-table -->
<thead>
    <tr class="ew-table-header">
@{
    // Header row
    itemList.RowType = RowType.Header;

    // Render list options
    await itemList.RenderListOptions();
}
@* Render list options (header, left) *@
@itemList.ListOptions.RenderHeader("left")
@if (itemList.ID.Visible) { // itemList.ID.Visible (begin)
        <th data-name="ID" class="@(itemList.ID.HeaderCellClass)"><div id="elh_Item_ID" class="Item_ID">@Html.Raw(itemList.RenderFieldHeader(itemList.ID))</div></th>
} @* itemList.ID.Visible (end) *@
@if (itemList.ItemName.Visible) { // itemList.ItemName.Visible (begin)
        <th data-name="ItemName" class="@(itemList.ItemName.HeaderCellClass)"><div id="elh_Item_ItemName" class="Item_ItemName">@Html.Raw(itemList.RenderFieldHeader(itemList.ItemName))</div></th>
} @* itemList.ItemName.Visible (end) *@
@if (itemList.Qty.Visible) { // itemList.Qty.Visible (begin)
        <th data-name="Qty" class="@(itemList.Qty.HeaderCellClass)"><div id="elh_Item_Qty" class="Item_Qty">@Html.Raw(itemList.RenderFieldHeader(itemList.Qty))</div></th>
} @* itemList.Qty.Visible (end) *@
@if (itemList.Price.Visible) { // itemList.Price.Visible (begin)
        <th data-name="Price" class="@(itemList.Price.HeaderCellClass)"><div id="elh_Item_Price" class="Item_Price">@Html.Raw(itemList.RenderFieldHeader(itemList.Price))</div></th>
} @* itemList.Price.Visible (end) *@
@if (itemList.OrderID.Visible) { // itemList.OrderID.Visible (begin)
        <th data-name="OrderID" class="@(itemList.OrderID.HeaderCellClass)"><div id="elh_Item_OrderID" class="Item_OrderID">@Html.Raw(itemList.RenderFieldHeader(itemList.OrderID))</div></th>
} @* itemList.OrderID.Visible (end) *@
@* Render list options (header, right) *@
@itemList.ListOptions.RenderHeader("right")
    </tr>
</thead>
<tbody data-page="@(itemList.PageNumber)">
@{
    await itemList.SetupGrid();
    bool eof = itemList.Recordset == null; // DN
}
@while (itemList.RecordCount < itemList.StopRecord || SameString(itemList.RowIndex, "$rowindex$")) { // Begin While
    if (!eof && !SameString(itemList.RowIndex, "$rowindex$") &&
        (!itemList.IsGridAdd || itemList.CurrentMode == "copy") &&
        (!((itemList.IsCopy || itemList.IsAdd) && itemList.RowIndex is int rowIndex && rowIndex == 0))) // DN
        eof = !await itemList.Recordset.ReadAsync();
    itemList.RecordCount++;
    if (itemList.RecordCount >= itemList.StartRecord) {
        await itemList.SetupRow();
    <tr @Html.Raw(itemList.RowAttributes)>
    @* Render list options (body, left) *@
    @itemList.ListOptions.RenderBody("left", itemList.RowCount)
    @if (itemList.ID.Visible) { // itemList.ID.Visible (begin)
        <td data-name="ID" @Html.Raw(itemList.ID.CellAttributes)>
<span id="el@(itemList.RowIndex == "$rowindex$" ? "$rowindex$" : itemList.RowCount)_Item_ID" class="el_Item_ID">
<span @Html.Raw(itemList.ID.ViewAttributes)>
@Html.Raw(itemList.ID.GetViewValue())</span>
</span>
</td>
    } @* itemList.ID.Visible (end) *@
    @if (itemList.ItemName.Visible) { // itemList.ItemName.Visible (begin)
        <td data-name="ItemName" @Html.Raw(itemList.ItemName.CellAttributes)>
<span id="el@(itemList.RowIndex == "$rowindex$" ? "$rowindex$" : itemList.RowCount)_Item_ItemName" class="el_Item_ItemName">
<span @Html.Raw(itemList.ItemName.ViewAttributes)>
@Html.Raw(itemList.ItemName.GetViewValue())</span>
</span>
</td>
    } @* itemList.ItemName.Visible (end) *@
    @if (itemList.Qty.Visible) { // itemList.Qty.Visible (begin)
        <td data-name="Qty" @Html.Raw(itemList.Qty.CellAttributes)>
<span id="el@(itemList.RowIndex == "$rowindex$" ? "$rowindex$" : itemList.RowCount)_Item_Qty" class="el_Item_Qty">
<span @Html.Raw(itemList.Qty.ViewAttributes)>
@Html.Raw(itemList.Qty.GetViewValue())</span>
</span>
</td>
    } @* itemList.Qty.Visible (end) *@
    @if (itemList.Price.Visible) { // itemList.Price.Visible (begin)
        <td data-name="Price" @Html.Raw(itemList.Price.CellAttributes)>
<span id="el@(itemList.RowIndex == "$rowindex$" ? "$rowindex$" : itemList.RowCount)_Item_Price" class="el_Item_Price">
<span @Html.Raw(itemList.Price.ViewAttributes)>
@Html.Raw(itemList.Price.GetViewValue())</span>
</span>
</td>
    } @* itemList.Price.Visible (end) *@
    @if (itemList.OrderID.Visible) { // itemList.OrderID.Visible (begin)
        <td data-name="OrderID" @Html.Raw(itemList.OrderID.CellAttributes)>
<span id="el@(itemList.RowIndex == "$rowindex$" ? "$rowindex$" : itemList.RowCount)_Item_OrderID" class="el_Item_OrderID">
<span @Html.Raw(itemList.OrderID.ViewAttributes)>
@Html.Raw(itemList.OrderID.GetViewValue())</span>
</span>
</td>
    } @* itemList.OrderID.Visible (end) *@
    @* Render list options (body, right) *@
    @itemList.ListOptions.RenderBody("right", itemList.RowCount)
    </tr>
    } @* End if *@

    // Reset for template row
    if (SameString(itemList.RowIndex, "$rowindex$"))
        itemList.RowIndex = 0;

    // Reset inline add/copy row
    if ((itemList.IsCopy || itemList.IsAdd) && itemList.RowIndex is int rowIndex2 && rowIndex2 == 0)
        itemList.RowIndex = 1;
} @* End While *@
</tbody>
</table><!-- /.ew-table -->
} @* End If TotalRecords > 0 *@
</div><!-- /.ew-grid-middle-panel -->
@if (Empty(itemList.CurrentAction) && !itemList.UseAjaxActions) {
<input type="hidden" name="action" id="action" value="">
}
</form><!-- /.ew-list-form -->
@{ itemList.CloseRecordset(); }
@if (!itemList.IsExport()) {
<div class="card-footer ew-grid-lower-panel">
@if (!itemList.IsGridAdd && !(itemList.IsGridEdit && itemList.ModalGridEdit) && !itemList.IsMultiEdit) {
@Html.Raw(itemList.Pager.Render())
}
<div class="ew-list-other-options">
@itemList.OtherOptions.RenderBody("bottom")
</div>
</div>
}
</div><!-- /.ew-grid -->
} else { // Show other options
<div class="ew-list-other-options">
@itemList.OtherOptions.ForEach(opt => opt.ButtonClass = "").RenderBody()
</div>
}
</div>
</main>
@itemList.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
@if (!itemList.IsExport()) {
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("Item");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
}
