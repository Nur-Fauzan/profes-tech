@{
    // View
    View = this;

    // Check action result
    if (ordersView.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!ordersView.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
@if (!ordersView.IsExport()) {
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
}
@if (!ordersView.IsExport()) {
<div class="btn-toolbar ew-toolbar">
    @ordersView.ExportOptions.RenderBody()
    @ordersView.OtherOptions.RenderBody()
</div>
}
@ordersView.ShowPageHeader()
@ordersView.ShowMessages()
<main class="view">
<form name="fOrdersview" id="fOrdersview" class="ew-form ew-view-form overlay-wrapper" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
@if (!ordersView.IsExport()) {
<script>
var currentTable = @Html.Raw(ConvertToJson(ordersView.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { Orders: currentTable } });
var currentPageID = ew.PAGE_ID = "view";
var currentForm;
var fOrdersview;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fOrdersview")
        .setPageId("view")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
}
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="modal" value="@ConvertToInt(ordersView.IsModal)">
<table class="@(ordersView.TableClass)">
@if (ordersView.SalesOrder.Visible) { // ordersView.SalesOrder.Visible (begin)
    <tr id="r_SalesOrder" @Html.Raw(ordersView.SalesOrder.RowAttributes)>
        <td class="@(ordersView.TableLeftColumnClass)"><span id="elh_Orders_SalesOrder">@Html.Raw(ordersView.SalesOrder.Caption)</span></td>
        <td data-name="SalesOrder" @Html.Raw(ordersView.SalesOrder.CellAttributes)>
<span id="el_Orders_SalesOrder">
<span @Html.Raw(ordersView.SalesOrder.ViewAttributes)>
@Html.Raw(ordersView.SalesOrder.GetViewValue())</span>
</span></td>
    </tr>
} @* ordersView.SalesOrder.Visible (end) *@
@if (ordersView.OrderDate.Visible) { // ordersView.OrderDate.Visible (begin)
    <tr id="r_OrderDate" @Html.Raw(ordersView.OrderDate.RowAttributes)>
        <td class="@(ordersView.TableLeftColumnClass)"><span id="elh_Orders_OrderDate">@Html.Raw(ordersView.OrderDate.Caption)</span></td>
        <td data-name="OrderDate" @Html.Raw(ordersView.OrderDate.CellAttributes)>
<span id="el_Orders_OrderDate">
<span @Html.Raw(ordersView.OrderDate.ViewAttributes)>
@Html.Raw(ordersView.OrderDate.GetViewValue())</span>
</span></td>
    </tr>
} @* ordersView.OrderDate.Visible (end) *@
@if (ordersView.Customer.Visible) { // ordersView.Customer.Visible (begin)
    <tr id="r_Customer" @Html.Raw(ordersView.Customer.RowAttributes)>
        <td class="@(ordersView.TableLeftColumnClass)"><span id="elh_Orders_Customer">@Html.Raw(ordersView.Customer.Caption)</span></td>
        <td data-name="Customer" @Html.Raw(ordersView.Customer.CellAttributes)>
<span id="el_Orders_Customer">
<span @Html.Raw(ordersView.Customer.ViewAttributes)>
@Html.Raw(ordersView.Customer.GetViewValue())</span>
</span></td>
    </tr>
} @* ordersView.Customer.Visible (end) *@
@if (ordersView.Address.Visible) { // ordersView.Address.Visible (begin)
    <tr id="r_Address" @Html.Raw(ordersView.Address.RowAttributes)>
        <td class="@(ordersView.TableLeftColumnClass)"><span id="elh_Orders_Address">@Html.Raw(ordersView.Address.Caption)</span></td>
        <td data-name="Address" @Html.Raw(ordersView.Address.CellAttributes)>
<span id="el_Orders_Address">
<span @Html.Raw(ordersView.Address.ViewAttributes)>
@Html.Raw(ordersView.Address.GetViewValue())</span>
</span></td>
    </tr>
} @* ordersView.Address.Visible (end) *@
</table>
@{ ordersView.CloseRecordset(); }
@if (ordersView.CurrentDetailTables.Contains("Items") && items.DetailView) {
    if (!Empty(ordersView.CurrentDetailTable)) {
<h4 class="ew-detail-caption">@Html.Raw(Language.TablePhrase("Items", "TblCaption"))</h4>
    }
        @await Html.PartialAsync("ItemsGrid")
    View = this;
}
</form>
</main>
@ordersView.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
@if (!ordersView.IsExport()) {
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
}
