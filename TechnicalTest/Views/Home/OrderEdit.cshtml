@{
    // View
    View = this;

    // Check action result
    if (orderEdit.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!orderEdit.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
@orderEdit.ShowPageHeader()
@orderEdit.ShowMessages()
<main class="edit">
<form name="fOrderedit" id="fOrderedit" class="@(orderEdit.FormClassName)" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
<script>
var currentTable = @Html.Raw(ConvertToJson(orderEdit.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { Order: currentTable } });
var currentPageID = ew.PAGE_ID = "edit";
var currentForm;
var fOrderedit;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fOrderedit")
        .setPageId("edit")

        // Add fields
        .setFields([

            ["SalesOrder", [fields.SalesOrder.visible && fields.SalesOrder.required ? ew.Validators.required(fields.SalesOrder.caption) : null], fields.SalesOrder.isInvalid],
            ["OrderDate", [fields.OrderDate.visible && fields.OrderDate.required ? ew.Validators.required(fields.OrderDate.caption) : null, ew.Validators.datetime(fields.OrderDate.clientFormatPattern)], fields.OrderDate.isInvalid],
            ["Customer", [fields.Customer.visible && fields.Customer.required ? ew.Validators.required(fields.Customer.caption) : null], fields.Customer.isInvalid],
            ["Address", [fields.Address.visible && fields.Address.required ? ew.Validators.required(fields.Address.caption) : null], fields.Address.isInvalid]
        ])

        // Form_CustomValidate
        .setCustomValidate(
            function(fobj) { // DO NOT CHANGE THIS LINE!
                    // Your custom validation code here, return false if invalid.
                    return true;
                }
        )

        // Use JavaScript validation or not
        .setValidateRequired(ew.CLIENT_VALIDATE)

        // Dynamic selection lists
        .setLists({
            "Customer": @Html.Raw(orderEdit.Customer.ToClientList(orderEdit)),
        })
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="action" id="action" value="update">
<input type="hidden" name="modal" value="@ConvertToInt(orderEdit.IsModal)">
@if (IsJsonResponse()) {
<input type="hidden" name="json" value="1">
}
<input type="hidden" name="@(orderEdit.OldKeyName)" value="@Html.Raw(orderEdit.OldKey)">
<div class="ew-edit-div"><!-- page* -->
@if (orderEdit.SalesOrder.Visible) { // orderEdit.SalesOrder.Visible (begin)
    <div id="r_SalesOrder" @Html.Raw(orderEdit.SalesOrder.RowAttributes)>
        <label id="elh_Order_SalesOrder" for="x_SalesOrder" class="@(orderEdit.LeftColumnClass)">@Html.Raw(orderEdit.SalesOrder.Caption)@Html.Raw(orderEdit.SalesOrder.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(orderEdit.RightColumnClass)"><div @Html.Raw(orderEdit.SalesOrder.CellAttributes)>
<span id="el_Order_SalesOrder">
<input type="@(orderEdit.SalesOrder.InputTextType)" name="x_SalesOrder" id="x_SalesOrder" data-table="Order" data-field="x_SalesOrder" value="@Html.Raw(orderEdit.SalesOrder.EditValue)" size="30" maxlength="10" placeholder="@Html.Raw(HtmlEncode(orderEdit.SalesOrder.PlaceHolder))" data-format-pattern="@(orderEdit.SalesOrder.FormatPattern)"@Html.Raw(orderEdit.SalesOrder.EditAttributes) aria-describedby="x_SalesOrder_help">
@Html.Raw(orderEdit.SalesOrder.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(orderEdit.SalesOrder.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* orderEdit.SalesOrder.Visible (end) *@
@if (orderEdit.OrderDate.Visible) { // orderEdit.OrderDate.Visible (begin)
    <div id="r_OrderDate" @Html.Raw(orderEdit.OrderDate.RowAttributes)>
        <label id="elh_Order_OrderDate" for="x_OrderDate" class="@(orderEdit.LeftColumnClass)">@Html.Raw(orderEdit.OrderDate.Caption)@Html.Raw(orderEdit.OrderDate.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(orderEdit.RightColumnClass)"><div @Html.Raw(orderEdit.OrderDate.CellAttributes)>
<span id="el_Order_OrderDate">
<input type="@(orderEdit.OrderDate.InputTextType)" name="x_OrderDate" id="x_OrderDate" data-table="Order" data-field="x_OrderDate" value="@Html.Raw(orderEdit.OrderDate.EditValue)" placeholder="@Html.Raw(HtmlEncode(orderEdit.OrderDate.PlaceHolder))" data-format-pattern="@(orderEdit.OrderDate.FormatPattern)"@Html.Raw(orderEdit.OrderDate.EditAttributes) aria-describedby="x_OrderDate_help">
@Html.Raw(orderEdit.OrderDate.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(orderEdit.OrderDate.GetErrorMessage())</div>
@if (!orderEdit.OrderDate.ReadOnly && !orderEdit.OrderDate.Disabled && !orderEdit.OrderDate.EditAttrs.Is("readonly") && !orderEdit.OrderDate.EditAttrs.Is("disabled")) {
<script>
loadjs.ready(["fOrderedit", "datetimepicker"], function () {
    let format = "@Html.Raw(DateFormat(0))", // DN
        options = {
                localization: {
                    locale: ew.LANGUAGE_ID + "-u-nu-" + ew.getNumberingSystem(),
                    hourCycle: format.match(/H/) ? "h24" : "h12",
                    format,
                    ...ew.language.phrase("datetimepicker")
                },
                display: {
                    icons: {
                        previous: ew.IS_RTL ? "fa-solid fa-chevron-right" : "fa-solid fa-chevron-left",
                        next: ew.IS_RTL ? "fa-solid fa-chevron-left" : "fa-solid fa-chevron-right"
                    },
                    components: {
                        hours: !!format.match(/h/i),
                        minutes: !!format.match(/m/),
                        seconds: !!format.match(/s/i)
                    },
                    theme: ew.isDark() ? "dark" : "auto"
                }
            };
    ew.createDateTimePicker("fOrderedit", "x_OrderDate", ew.deepAssign({"useCurrent":false,"display":{"sideBySide":false}}, options));
});
</script>
}
</span>
</div></div>
    </div>
} @* orderEdit.OrderDate.Visible (end) *@
@if (orderEdit.Customer.Visible) { // orderEdit.Customer.Visible (begin)
    <div id="r_Customer" @Html.Raw(orderEdit.Customer.RowAttributes)>
        <label id="elh_Order_Customer" for="x_Customer" class="@(orderEdit.LeftColumnClass)">@Html.Raw(orderEdit.Customer.Caption)@Html.Raw(orderEdit.Customer.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(orderEdit.RightColumnClass)"><div @Html.Raw(orderEdit.Customer.CellAttributes)>
<span id="el_Order_Customer">
    <select
        id="x_Customer"
        name="x_Customer"
        class="form-select ew-select@(orderEdit.Customer.IsInvalidClass)"
        data-select2-id="fOrderedit_x_Customer"
        data-table="Order"
        data-field="x_Customer"
        data-value-separator="@(orderEdit.Customer.DisplayValueSeparatorAttribute)"
        data-placeholder="@(HtmlEncode(orderEdit.Customer.PlaceHolder))"
        @Html.Raw(orderEdit.Customer.EditAttributes)>
        @(orderEdit.Customer.SelectOptionListHtml("x_Customer"))
    </select>
    @Html.Raw(orderEdit.Customer.GetCustomMessage)
    <div class="invalid-feedback">@Html.Raw(orderEdit.Customer.GetErrorMessage())</div>
<script>
loadjs.ready("fOrderedit", function() {
    var options = { name: "x_Customer", selectId: "fOrderedit_x_Customer" },
        el = document.querySelector("select[data-select2-id='" + options.selectId + "']");
    if (!el)
        return;
    options.closeOnSelect = !options.multiple;
    options.dropdownParent = el.closest("#ew-modal-dialog, #ew-add-opt-dialog");
    if (fOrderedit.lists.Customer?.lookupOptions.length) {
        options.data = { id: "x_Customer", form: "fOrderedit" };
    } else {
        options.ajax = { id: "x_Customer", form: "fOrderedit", limit: ew.LOOKUP_PAGE_SIZE };
    }
    options.minimumResultsForSearch = Infinity;
    options = Object.assign({}, ew.selectOptions, options, ew.vars.tables.Order.fields.Customer.selectOptions);
    ew.createSelect(options);
});
</script>
</span>
</div></div>
    </div>
} @* orderEdit.Customer.Visible (end) *@
@if (orderEdit.Address.Visible) { // orderEdit.Address.Visible (begin)
    <div id="r_Address" @Html.Raw(orderEdit.Address.RowAttributes)>
        <label id="elh_Order_Address" for="x_Address" class="@(orderEdit.LeftColumnClass)">@Html.Raw(orderEdit.Address.Caption)@Html.Raw(orderEdit.Address.Required ? Language.Phrase("FieldRequiredIndicator") : "")</label>
        <div class="@(orderEdit.RightColumnClass)"><div @Html.Raw(orderEdit.Address.CellAttributes)>
<span id="el_Order_Address">
<input type="@(orderEdit.Address.InputTextType)" name="x_Address" id="x_Address" data-table="Order" data-field="x_Address" value="@Html.Raw(orderEdit.Address.EditValue)" size="30" maxlength="255" placeholder="@Html.Raw(HtmlEncode(orderEdit.Address.PlaceHolder))" data-format-pattern="@(orderEdit.Address.FormatPattern)"@Html.Raw(orderEdit.Address.EditAttributes) aria-describedby="x_Address_help">
@Html.Raw(orderEdit.Address.GetCustomMessage)
<div class="invalid-feedback">@Html.Raw(orderEdit.Address.GetErrorMessage())</div>
</span>
</div></div>
    </div>
} @* orderEdit.Address.Visible (end) *@
</div><!-- /page* -->
    <input type="hidden" data-table="Order" data-field="x_ID" data-hidden="1" name="x_ID" id="x_ID" value="@Html.Raw(HtmlEncode(orderEdit.ID.CurrentValue))">
@{ orderEdit.CloseRecordset(); }
@if (orderEdit.CurrentDetailTables.Contains("Item") && item.DetailEdit) {
    if (!Empty(orderEdit.CurrentDetailTable)) {
<h4 class="ew-detail-caption">@Html.Raw(Language.TablePhrase("Item", "TblCaption"))</h4>
    }
        @await Html.PartialAsync("ItemGrid")
    View = this;
}
@Html.Raw(orderEdit.IsModal ? "<template class=\"ew-modal-buttons\">" : "<div class=\"row ew-buttons\">")<!-- buttons .row -->
    <div class="@(orderEdit.OffsetColumnClass)"><!-- buttons offset -->
    <button class="btn btn-primary ew-btn" name="btn-action" id="btn-action" type="submit" form="fOrderedit">@Html.Raw(Language.Phrase("SaveBtn"))</button>
@if (IsJsonResponse()) {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" data-bs-dismiss="modal">@Html.Raw(Language.Phrase("CancelBtn"))</button>
} else {
    <button class="btn btn-default ew-btn" name="btn-cancel" id="btn-cancel" type="button" form="fOrderedit" data-href="@AppPath(orderEdit.ReturnUrl)">@Html.Raw(Language.Phrase("CancelBtn"))</button>
}
    </div><!-- /buttons offset -->
@Html.Raw(orderEdit.IsModal ? "</template>" : "</div>")<!-- /buttons .row -->
</form>
</main>
@orderEdit.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
<script>
// Field event handlers
loadjs.ready("head", function() {
    ew.addEventHandlers("Order");
});
</script>
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
