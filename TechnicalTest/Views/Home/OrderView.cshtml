@{
    // View
    View = this;

    // Check action result
    if (orderView.ActionResult is EmptyResult) { // Terminate page
        return;
    }

    // Layout
    if (!orderView.UseLayout) // UseLayout = false // DN
        Layout = "";
    else
        Layout = "_Layout";

    // Local variables (Temp data)
    #pragma warning disable 168
    string? sqlWrk, filterWrk, whereWrk, curVal, dispVal;
    List<Dictionary<string, object>>? rswrk;
    string[]? arWrk;
    List<object?>? listWrk;
    object? guidWrk;
    Func<string>? lookupFilter;
    #pragma warning restore 168
}
@if (!orderView.IsExport()) {
<script>
loadjs.ready("head", function() {
    // Write your client script here, no need to add script tags.
});
</script>
}
@if (!orderView.IsExport()) {
<div class="btn-toolbar ew-toolbar">
    @orderView.ExportOptions.RenderBody()
    @orderView.OtherOptions.RenderBody()
</div>
}
@orderView.ShowPageHeader()
@orderView.ShowMessages()
<main class="view">
<form name="fOrderview" id="fOrderview" class="ew-form ew-view-form overlay-wrapper" action="@AppPath(CurrentPageName())" method="post" novalidate autocomplete="off">
@if (!orderView.IsExport()) {
<script>
var currentTable = @Html.Raw(ConvertToJson(orderView.ToClientVar()));
ew.deepAssign(ew.vars, { tables: { Order: currentTable } });
var currentPageID = ew.PAGE_ID = "view";
var currentForm;
var fOrderview;
loadjs.ready(["wrapper", "head"], function () {
    let $ = jQuery;
    let fields = currentTable.fields;

    // Form object
    let form = new ew.FormBuilder()
        .setId("fOrderview")
        .setPageId("view")
        .build();
    window[form.id] = form;
    currentForm = form;
    loadjs.done(form.id);
});
</script>
}
@if (CurrentPage.CheckToken) {
    <input type="hidden" name="@Config.TokenNameKey" value="@Config.TokenName"><!-- CSRF token name -->
    @Html.AntiForgeryToken()
}
<input type="hidden" name="modal" value="@ConvertToInt(orderView.IsModal)">
<table class="@(orderView.TableClass)">
@if (orderView.ID.Visible) { // orderView.ID.Visible (begin)
    <tr id="r_ID" @Html.Raw(orderView.ID.RowAttributes)>
        <td class="@(orderView.TableLeftColumnClass)"><span id="elh_Order_ID">@Html.Raw(orderView.ID.Caption)</span></td>
        <td data-name="ID" @Html.Raw(orderView.ID.CellAttributes)>
<span id="el_Order_ID">
<span @Html.Raw(orderView.ID.ViewAttributes)>
@Html.Raw(orderView.ID.GetViewValue())</span>
</span></td>
    </tr>
} @* orderView.ID.Visible (end) *@
@if (orderView.SalesOrder.Visible) { // orderView.SalesOrder.Visible (begin)
    <tr id="r_SalesOrder" @Html.Raw(orderView.SalesOrder.RowAttributes)>
        <td class="@(orderView.TableLeftColumnClass)"><span id="elh_Order_SalesOrder">@Html.Raw(orderView.SalesOrder.Caption)</span></td>
        <td data-name="SalesOrder" @Html.Raw(orderView.SalesOrder.CellAttributes)>
<span id="el_Order_SalesOrder">
<span @Html.Raw(orderView.SalesOrder.ViewAttributes)>
@Html.Raw(orderView.SalesOrder.GetViewValue())</span>
</span></td>
    </tr>
} @* orderView.SalesOrder.Visible (end) *@
@if (orderView.OrderDate.Visible) { // orderView.OrderDate.Visible (begin)
    <tr id="r_OrderDate" @Html.Raw(orderView.OrderDate.RowAttributes)>
        <td class="@(orderView.TableLeftColumnClass)"><span id="elh_Order_OrderDate">@Html.Raw(orderView.OrderDate.Caption)</span></td>
        <td data-name="OrderDate" @Html.Raw(orderView.OrderDate.CellAttributes)>
<span id="el_Order_OrderDate">
<span @Html.Raw(orderView.OrderDate.ViewAttributes)>
@Html.Raw(orderView.OrderDate.GetViewValue())</span>
</span></td>
    </tr>
} @* orderView.OrderDate.Visible (end) *@
@if (orderView.Customer.Visible) { // orderView.Customer.Visible (begin)
    <tr id="r_Customer" @Html.Raw(orderView.Customer.RowAttributes)>
        <td class="@(orderView.TableLeftColumnClass)"><span id="elh_Order_Customer">@Html.Raw(orderView.Customer.Caption)</span></td>
        <td data-name="Customer" @Html.Raw(orderView.Customer.CellAttributes)>
<span id="el_Order_Customer">
<span @Html.Raw(orderView.Customer.ViewAttributes)>
@Html.Raw(orderView.Customer.GetViewValue())</span>
</span></td>
    </tr>
} @* orderView.Customer.Visible (end) *@
@if (orderView.Address.Visible) { // orderView.Address.Visible (begin)
    <tr id="r_Address" @Html.Raw(orderView.Address.RowAttributes)>
        <td class="@(orderView.TableLeftColumnClass)"><span id="elh_Order_Address">@Html.Raw(orderView.Address.Caption)</span></td>
        <td data-name="Address" @Html.Raw(orderView.Address.CellAttributes)>
<span id="el_Order_Address">
<span @Html.Raw(orderView.Address.ViewAttributes)>
@Html.Raw(orderView.Address.GetViewValue())</span>
</span></td>
    </tr>
} @* orderView.Address.Visible (end) *@
</table>
@{ orderView.CloseRecordset(); }
</form>
</main>
@orderView.ShowPageFooter()
@Html.Raw(GetDebugMessage())
@ElapsedTime()
@if (!orderView.IsExport()) {
<script>
loadjs.ready("load", function() {
    // Write your table-specific startup script here
    // document.write("page loaded");
});
</script>
}
